// Generated by view binder compiler. Do not edit!
package com.example.terraceties.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.terraceties.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ResFixtItemBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final LinearLayout MainLL;

  @NonNull
  public final TextView awayTeam;

  @NonNull
  public final TextView awayTeamScore;

  @NonNull
  public final TextView date;

  @NonNull
  public final TextView homeTeam;

  @NonNull
  public final TextView homeTeamScore;

  @NonNull
  public final TextView round;

  @NonNull
  public final LinearLayout scoreLL;

  @NonNull
  public final TextView seperator;

  @NonNull
  public final TextView venue;

  @NonNull
  public final TextView vs;

  private ResFixtItemBinding(@NonNull CardView rootView, @NonNull LinearLayout MainLL,
      @NonNull TextView awayTeam, @NonNull TextView awayTeamScore, @NonNull TextView date,
      @NonNull TextView homeTeam, @NonNull TextView homeTeamScore, @NonNull TextView round,
      @NonNull LinearLayout scoreLL, @NonNull TextView seperator, @NonNull TextView venue,
      @NonNull TextView vs) {
    this.rootView = rootView;
    this.MainLL = MainLL;
    this.awayTeam = awayTeam;
    this.awayTeamScore = awayTeamScore;
    this.date = date;
    this.homeTeam = homeTeam;
    this.homeTeamScore = homeTeamScore;
    this.round = round;
    this.scoreLL = scoreLL;
    this.seperator = seperator;
    this.venue = venue;
    this.vs = vs;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ResFixtItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ResFixtItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.res_fixt_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ResFixtItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.MainLL;
      LinearLayout MainLL = ViewBindings.findChildViewById(rootView, id);
      if (MainLL == null) {
        break missingId;
      }

      id = R.id.awayTeam;
      TextView awayTeam = ViewBindings.findChildViewById(rootView, id);
      if (awayTeam == null) {
        break missingId;
      }

      id = R.id.awayTeamScore;
      TextView awayTeamScore = ViewBindings.findChildViewById(rootView, id);
      if (awayTeamScore == null) {
        break missingId;
      }

      id = R.id.date;
      TextView date = ViewBindings.findChildViewById(rootView, id);
      if (date == null) {
        break missingId;
      }

      id = R.id.homeTeam;
      TextView homeTeam = ViewBindings.findChildViewById(rootView, id);
      if (homeTeam == null) {
        break missingId;
      }

      id = R.id.homeTeamScore;
      TextView homeTeamScore = ViewBindings.findChildViewById(rootView, id);
      if (homeTeamScore == null) {
        break missingId;
      }

      id = R.id.round;
      TextView round = ViewBindings.findChildViewById(rootView, id);
      if (round == null) {
        break missingId;
      }

      id = R.id.scoreLL;
      LinearLayout scoreLL = ViewBindings.findChildViewById(rootView, id);
      if (scoreLL == null) {
        break missingId;
      }

      id = R.id.seperator;
      TextView seperator = ViewBindings.findChildViewById(rootView, id);
      if (seperator == null) {
        break missingId;
      }

      id = R.id.venue;
      TextView venue = ViewBindings.findChildViewById(rootView, id);
      if (venue == null) {
        break missingId;
      }

      id = R.id.vs;
      TextView vs = ViewBindings.findChildViewById(rootView, id);
      if (vs == null) {
        break missingId;
      }

      return new ResFixtItemBinding((CardView) rootView, MainLL, awayTeam, awayTeamScore, date,
          homeTeam, homeTeamScore, round, scoreLL, seperator, venue, vs);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
